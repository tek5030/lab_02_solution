cmake_minimum_required(VERSION 3.5.1)

# Set project name.
project(solution-image-blending)

# Set executable name.
set(exe_name solution_image_blending)

# Make cmake first look for "Find<package>.cmake" functions generated by conan.
list(PREPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})

# Find required libraries.
find_package(OpenCV 4 REQUIRED)

# We use the "OpenCV_LIBS" variable for backward compatibility with the old lab setup.
if (NOT OpenCV_LIBS)
  set(OpenCV_LIBS "opencv::opencv")
endif()

# Add an executable target to the project with the specified source files.
add_executable(${exe_name}
  main.cpp
  solution_image_blending.h
  solution_image_blending.cpp
  laplace_blending.h
  laplace_blending.cpp
  linear_blending.h
  linear_blending.cpp
  )

# Specify libraries that will be linked with the executable target.
target_link_libraries(${exe_name}
  ${OpenCV_LIBS}
  )

# Set properties for the executable target.
set_target_properties(${exe_name} PROPERTIES
  CXX_STANDARD_REQUIRED ON
  CXX_STANDARD 17
  )

# Define two groups of supported compilers.
set(gcc_like_cxx "$<COMPILE_LANG_AND_ID: CXX, ARMClang, AppleClang, Clang, GNU, LCC>")
set(msvc_cxx "$<COMPILE_LANG_AND_ID: CXX, MSVC>")

# Set compiler specific flags and definitions.
target_compile_options(${exe_name} PRIVATE
  "$<${gcc_like_cxx}:$<BUILD_INTERFACE: -Wall; -Wextra; -Wpedantic; -Wshadow; -Wformat=2>>"
  "$<${msvc_cxx}:$<BUILD_INTERFACE: -W4; -MD>>"
  )
target_compile_definitions(${exe_name} PUBLIC
  "$<${msvc_cxx}: -D_USE_MATH_DEFINES>"
  )

# Copy test images to build directory so they are easy to find.
set(test_images
  lion.png
  tiger.png
  white_tiger.png
  )
file(COPY ${test_images}
  DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/
  )
